package ${package.Controller};


#if(${restControllerStyle})
import org.springframework.web.bind.annotation.*;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import org.springframework.validation.FieldError;
import com.jswhzl.common.bean.ReturnEntity;
import com.jswhzl.common.bean.ReturnEntityError;
import com.jswhzl.common.bean.ReturnEntitySuccess;
import com.jswhzl.common.config.Constants;
import com.jswhzl.common.util.Pager;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import com.jswhzl.api.service.impl.${table.serviceImplName};
import ${package.Entity}.${entity};
import java.time.LocalDateTime;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#else
@Controller
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#end
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    private final Logger logger = LoggerFactory.getLogger(${table.controllerName}.class);
    @Autowired
    private ${table.serviceImplName} ${table.entityPath}Service;

    /**
     * 分页查询列表
     *
     * @param pager 分页信息
     * @param ${table.entityPath}
     * @return
     */
    @GetMapping("/page")
    public ReturnEntity selectPageList(Pager<${entity}> pager, ${entity} ${table.entityPath},
                                       HttpServletRequest request, HttpServletResponse response) {
        try {
            QueryWrapper<${entity}> wrapper = new QueryWrapper<>();
            List<${entity}> records = ${table.entityPath}Service.page(pager, wrapper).getRecords();
            int count = ${table.entityPath}Service.count(wrapper);
            return new ReturnEntitySuccess(Constants.MSG_FIND_SUCCESS, count, records);
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("[" + Constants.MSG_FIND_FAILED + "]:" + e.getMessage());
            return new ReturnEntityError(Constants.MSG_FIND_FAILED, null, null);
        }
    }

    /**
     * 查询所有列表
     * @param ${table.entityPath}
     * @return
     */
    @GetMapping
    public ReturnEntity selectList(${entity} ${table.entityPath},
                                   HttpServletRequest request, HttpServletResponse response) {
        try {
            QueryWrapper<${entity}> wrapper = new QueryWrapper<>();
            List<${entity}> list = ${table.entityPath}Service.list(wrapper);
            return new ReturnEntitySuccess(Constants.MSG_FIND_SUCCESS, list.size(), list);
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("[" + Constants.MSG_FIND_FAILED + "]:" + e.getMessage());
            return new ReturnEntityError(Constants.MSG_FIND_FAILED, null, null);
        }
    }

    /**
     * 查询详情
     *
     * @param id
     * @return
     */
    @GetMapping("/detail/{id}")
    public ReturnEntity selectById(@PathVariable("id") Long id) {
        try {
            ${entity} ${table.entityPath} = ${table.entityPath}Service.getById(id);
            if (null != ${table.entityPath}) {
                return new ReturnEntitySuccess(Constants.MSG_FIND_SUCCESS, ${table.entityPath});
            } else {
                return new ReturnEntitySuccess(Constants.MSG_FIND_NOT_FOUND);
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            return new ReturnEntityError(Constants.MSG_FIND_FAILED);
        }
    }

    /**
     * 新增
     *
     * @param ${table.entityPath}
     * @param result
     * @return
     */
    @PostMapping
    public ReturnEntity save(@Validated @RequestBody ${entity} ${table.entityPath}, BindingResult result,
                             HttpServletRequest request, HttpServletResponse response) {
        if (result.hasErrors()) {
            FieldError fieldError = result.getFieldErrors().get(0);
            String errorMsg = fieldError.getDefaultMessage();
            if(Constants.MSG_ERROR_CANNOT_NULL.equals(errorMsg)){
                errorMsg = fieldError.getField() + fieldError.getDefaultMessage();
            }
            return new ReturnEntityError(errorMsg, null, ${table.entityPath});
        } else {
            QueryWrapper<${entity}> wrapper = new QueryWrapper<>();
            if (${table.entityPath}Service.count(wrapper) > 0) {
                return new ReturnEntityError(Constants.MSG_FIND_EXISTED, ${table.entityPath});
            } else {
                if (${table.entityPath}Service.save(${table.entityPath})) {
                    return new ReturnEntitySuccess(Constants.MSG_INSERT_SUCCESS, null, ${table.entityPath});
                } else {
                    return new ReturnEntityError(Constants.MSG_INSERT_FAILED, null, ${table.entityPath});
                }
            }
        }
    }

    /**
     * 修改
     *
     * @param id
     * @param ${table.entityPath}
     * @param result
     * @return
     */
    @PutMapping("/{id}")
    public ReturnEntity updateById(@PathVariable("id") Long id, @Validated @RequestBody ${entity} ${table.entityPath}, BindingResult result,
                                   HttpServletRequest request, HttpServletResponse response) {
        if (result.hasErrors()) {
            return new ReturnEntityError(result.getFieldErrors().get(0).getDefaultMessage(), ${table.entityPath});
        } else {
            if (null == ${table.entityPath}Service.getById(id)) {
                return new ReturnEntityError(Constants.MSG_FIND_NOT_FOUND, ${table.entityPath});
            } else {
                if (${table.entityPath}Service.updateById(${table.entityPath})) {
                    return new ReturnEntitySuccess(Constants.MSG_UPDATE_SUCCESS, ${table.entityPath});
                } else {
                    return new ReturnEntityError(Constants.MSG_UPDATE_FAILED, ${table.entityPath});
                }
            }
        }
    }

    /**
     * 删除
     *
     * @param id
     * @return
     */
    @DeleteMapping("/{id}")
    public ReturnEntity deleteById(@PathVariable("id") Long id) {
        if (null == ${table.entityPath}Service.getById(id)) {
            return new ReturnEntityError(Constants.MSG_FIND_NOT_FOUND, id);
        }else{
            if (${table.entityPath}Service.removeById(id)) {
                return new ReturnEntitySuccess(Constants.MSG_DELETE_SUCCESS, id);
            }else{
                return new ReturnEntityError(Constants.MSG_DELETE_FAILED, id);
            }
        }
    }

}
#end